---
import Navigation from "../components/Navigation.astro";
import Footer from "../components/Footer.astro";
import { defaultLocale, locales, type Locale } from "i18n";
import "@/styles/globals.css";
import { getI18N } from "@/i18n/data";

interface Props {
  title: string;
  locale: Locale;
}

const { title, locale } = Astro.props;

const i18n = getI18N(locale);
---

<html lang={locale}>
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.ico" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <meta name="description" content={i18n.metaDescription} />
    <title>{title}</title>
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Montserrat:wght@100;200;400;500;600;700;800&display=swap"
      rel="stylesheet"
    />
    <!-- Animate.css CDN -->
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css"
    />
  </head>
  <body class="min-h-screen text-palette-white font-montserrat bg-palette-dark">
    <div class="w-full min-h-screen h-full flex flex-col gap-10">
      <Navigation />
      <main class="text-palette-white container mx-auto flex flex-col gap-10">
        <slot />
      </main>
      <Footer />
    </div>
    <style>
      @tailwind base;
      @tailwind components;
      @tailwind utilities;

      /* Firefox */
      * {
        scrollbar-width: thin;
        scrollbar-color: #404040 #000000;
      }

      /* Other browsers */
      *::-webkit-scrollbar {
        width: 10px;
      }

      *::-webkit-scrollbar-track {
        background: #000000;
      }

      *::-webkit-scrollbar-thumb {
        background-color: #404040;
        border-radius: 0px;
        border: 0px none #ffffff;
      }
    </style>
    <script define:vars={{ locales, defaultLocale }}>
      const savedLocale = localStorage.getItem("lang");

      if (
        savedLocale &&
        locales.includes(savedLocale) &&
        savedLocale !== window.location.pathname.replaceAll("/", "")
      ) {
        window.location.pathname = savedLocale;
      }

      const animations = [...document.querySelectorAll(".animate")];
      const callback = (entries, observer) => {
        entries.forEach((entry) => {
          let animationClasses = (
            entry.target.getAttribute("data-animation") ?? ""
          ).split(" ");

          if (entry.isIntersecting) {
            if (
              !entry.target.getAttribute("data-animation-repeat") &&
              entry.target.getAttribute("data-animation-repeated")
            ) {
              observer.unobserve(entry.target);
              return;
            }
            entry.target.setAttribute("data-animation-repeated", "true");
            animationClasses.forEach((className) => {
              entry.target.classList.add(className);
            });
            if (entry.target.classList.contains("invisible")) {
              entry.target.classList.remove("invisible");
            }
          } else if (
            !entry.isIntersecting &&
            entry.boundingClientRect.top > 0
          ) {
            animationClasses.forEach((className) => {
              entry.target.classList.remove(className);
            });
          }
        });
      };

      const observer = new IntersectionObserver(callback, {});

      animations.forEach((animation) => observer.observe(animation));
    </script>
  </body>
</html>
